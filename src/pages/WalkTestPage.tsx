// src/pages/WalkTestPage.tsx - Corrected "Start New Test" button behavior
import React, { useState, useEffect, useRef } from 'react';
import { addWalkTestResult, updateWalkTestDistance, WalkTestResult } from '../db/db';
import './WalkTestPage.css'; // Assuming you have CSS for this page

import {
  Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend,
} from 'chart.js';
import { Line } from 'react-chartjs-2';

ChartJS.register( CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend );

type TestPhase = 'idle' | 'running' | 'paused' | 'midpoint_log' | 'post_test_log' | 'recovery_timer_running' | 'recovery_log' | 'finished' | 'error';
type DistanceUnit = 'meters' | 'feet';

const TEST_DURATION_SECONDS = 360;
const MIDPOINT_SECONDS = TEST_DURATION_SECONDS / 2;
const RECOVERY_DURATION_SECONDS = 60;
// const TIMER_INTERVAL_MS = 1000; // Not used with current timer logic

function WalkTestPage() {
    const [testPhase, setTestPhase] = useState<TestPhase>('idle');
    const [mainTimer, setMainTimer] = useState(TEST_DURATION_SECONDS);
    const [recoveryTimer, setRecoveryTimer] = useState(RECOVERY_DURATION_SECONDS);
    const [mainIntervalId, setMainIntervalId] = useState<NodeJS.Timeout | null>(null);
    const [recoveryIntervalId, setRecoveryIntervalId] = useState<NodeJS.Timeout | null>(null);
    const [preTestSpo2, setPreTestSpo2] = useState<number | ''>('');
    const [preTestPulse, setPreTestPulse] = useState<number | ''>('');
    const [preTestOxygenOn, setPreTestOxygenOn] = useState<boolean>(false);
    const [preTestOxygenFlow, setPreTestOxygenFlow] = useState<number | ''>('');
    const [hasCOPD, setHasCOPD] = useState<boolean>(false);
    const [midpointSpo2, setMidpointSpo2] = useState<number | ''>('');
    const [midpointPulse, setMidpointPulse] = useState<number | ''>('');
    const [postTestSpo2, setPostTestSpo2] = useState<number | ''>('');
    const [postTestPulse, setPostTestPulse] = useState<number | ''>('');
    const [recoverySpo2, setRecoverySpo2] = useState<number | ''>('');
    const [recoveryPulse, setRecoveryPulse] = useState<number | ''>('');
    const [statusMessage, setStatusMessage] = useState<string | null>(null);
    const [currentTestId, setCurrentTestId] = useState<number | null>(null);
    const [distanceInput, setDistanceInput] = useState<string>('');
    const [distanceUnitInput, setDistanceUnitInput] = useState<DistanceUnit>('meters');

    const testPhaseRef = useRef(testPhase);
    useEffect(() => { testPhaseRef.current = testPhase; }, [testPhase]);

    useEffect(() => { return () => { if (mainIntervalId) clearInterval(mainIntervalId); }; }, [mainIntervalId]);
    useEffect(() => { return () => { if (recoveryIntervalId) clearInterval(recoveryIntervalId); }; }, [recoveryIntervalId]);

    const formatTime = (totalSeconds: number): string => { const minutes = Math.floor(totalSeconds / 60); const seconds = totalSeconds % 60; return `${String(minutes).padStart(2, '0')}:${String(seconds).padStart(2, '0')}`; };

    const pauseMainTimer = () => { if (mainIntervalId) { clearInterval(mainIntervalId); setMainIntervalId(null); console.log("Main timer interval CLEARED for pause."); } };
    const startMainTimer = () => { if (mainIntervalId) clearInterval(mainIntervalId); console.log("Starting MAIN timer interval"); const newIntervalId = setInterval(() => { setMainTimer((prevTimer) => { const nextTimer = prevTimer - 1; if (nextTimer < 0) { console.log("MAIN TIMER FINISHED (interval check)!"); clearInterval(newIntervalId); setMainIntervalId(null); if (testPhaseRef.current !== 'post_test_log' && testPhaseRef.current !== 'finished') { setTestPhase('post_test_log'); setStatusMessage("Time's up! Please record your Post-Test SpO2 and Pulse below."); setTimeout(() => setStatusMessage(null), 5000); } return 0; } return nextTimer; }); }, 1000); setMainIntervalId(newIntervalId); };
    const resumeMainTimer = () => { if (testPhase === 'paused' || testPhase === 'midpoint_log') { console.log("Resuming main timer from phase:", testPhase); setTestPhase('running'); setMainTimer(prev => prev - 1); setTimeout(startMainTimer, 10); } else { console.warn("Attempted to resume timer from unexpected phase:", testPhase); } };
    const stopTest = () => { if (mainIntervalId) clearInterval(mainIntervalId); if (recoveryIntervalId) clearInterval(recoveryIntervalId); setMainIntervalId(null); setRecoveryIntervalId(null); setMainTimer(TEST_DURATION_SECONDS); setRecoveryTimer(RECOVERY_DURATION_SECONDS); setPreTestSpo2(''); setPreTestPulse(''); setPreTestOxygenOn(false); setPreTestOxygenFlow(''); setHasCOPD(false); setMidpointSpo2(''); setMidpointPulse(''); setPostTestSpo2(''); setPostTestPulse(''); setRecoverySpo2(''); setRecoveryPulse(''); setDistanceInput(''); setDistanceUnitInput('meters'); setCurrentTestId(null); setTestPhase('idle'); setStatusMessage("Test stopped and reset."); setTimeout(() => setStatusMessage(null), 3000); };
    const startRecoveryTimer = () => { if (recoveryIntervalId) clearInterval(recoveryIntervalId); console.log(">>> startRecoveryTimer function CALLED <<<"); setRecoveryTimer(RECOVERY_DURATION_SECONDS); setTestPhase('recovery_timer_running'); const newRecoveryIntervalId = setInterval(() => { setRecoveryTimer((prevTimer) => { const nextTimer = prevTimer - 1; if (nextTimer < 0) { clearInterval(newRecoveryIntervalId); setRecoveryIntervalId(null); setTestPhase('recovery_log'); setStatusMessage("Recovery period over. Please record your Recovery SpO2 and Pulse below."); setTimeout(() => setStatusMessage(null), 5000); return 0; } return nextTimer; }); }, 1000); setRecoveryIntervalId(newRecoveryIntervalId); };

   useEffect(() => { if (testPhase === 'running' && mainTimer === MIDPOINT_SECONDS) { console.log(`useEffect detected MIDPOINT (Timer remaining: ${mainTimer}) - PAUSING`); setStatusMessage("Halfway point! Please record your Midpoint SpO2 and Pulse below."); setTimeout(() => setStatusMessage(null), 5000); pauseMainTimer(); setTestPhase('midpoint_log'); } }, [mainTimer, testPhase]);

    const handleStartTest = () => { if (preTestSpo2 === '' || preTestPulse === '') { setStatusMessage("Please enter Resting SpOâ‚‚ and Pulse before starting."); setTimeout(() => setStatusMessage(null), 3000); return; } if (preTestOxygenOn && preTestOxygenFlow === '') { setStatusMessage("Please enter Oxygen Flow Rate (L/min) when 'On Oxygen' is set to 'Yes'."); setTimeout(() => setStatusMessage(null), 3000); return; } /* stopTest() was removed from here previously, ensuring pre-test values are kept */ console.log("handleStartTest: Starting new test, preserving pre-test inputs."); setMainTimer(TEST_DURATION_SECONDS); setRecoveryTimer(RECOVERY_DURATION_SECONDS); if (mainIntervalId) clearInterval(mainIntervalId); if (recoveryIntervalId) clearInterval(recoveryIntervalId); setMainIntervalId(null); setRecoveryIntervalId(null); setMidpointSpo2(''); setMidpointPulse(''); setPostTestSpo2(''); setPostTestPulse(''); setRecoverySpo2(''); setRecoveryPulse(''); setCurrentTestId(null); setDistanceInput(''); setStatusMessage(null); setTestPhase('running'); startMainTimer(); };
    const handlePauseResume = () => { if (testPhase === 'running') { pauseMainTimer(); setTestPhase('paused'); } else if (testPhase === 'paused') { resumeMainTimer(); } };
    const handleSaveMidpoint = () => { if (midpointSpo2 === '' || midpointPulse === '') { setStatusMessage("Please enter Midpoint SpO2 and Pulse."); setTimeout(() => setStatusMessage(null), 3000); return; } console.log("Midpoint saved locally:", { midpointSpo2, midpointPulse }); setStatusMessage("Midpoint readings recorded. Resuming test..."); setTimeout(() => setStatusMessage(null), 3000); resumeMainTimer(); };
    const handleSavePostTest = () => { if (postTestSpo2 === '' || postTestPulse === '') { setStatusMessage("Please enter Post-Test SpO2 and Pulse."); setTimeout(() => setStatusMessage(null), 3000); return; } console.log("Post-Test saved locally:", { postTestSpo2, postTestPulse }); setStatusMessage(null); startRecoveryTimer(); };
    const handleSaveRecovery = async () => { if (recoverySpo2 === '' || recoveryPulse === '') { setStatusMessage("Please enter Recovery SpO2 and Pulse."); setTimeout(() => setStatusMessage(null), 3000); return; } console.log("Recovery saved locally:", { recoverySpo2, recoveryPulse }); const resultData: Omit<WalkTestResult, 'id' | 'distance' | 'distanceUnit'> = { testTimestamp: new Date(), hasCOPD: hasCOPD, oxygenOn: preTestOxygenOn, oxygenFlow: preTestOxygenOn ? (preTestOxygenFlow === '' ? undefined : Number(preTestOxygenFlow)) : undefined, preTestSpo2: preTestSpo2 === '' ? undefined : Number(preTestSpo2), preTestPulse: preTestPulse === '' ? undefined : Number(preTestPulse), midpointSpo2: midpointSpo2 === '' ? undefined : Number(midpointSpo2), midpointPulse: midpointPulse === '' ? undefined : Number(midpointPulse), postTestSpo2: postTestSpo2 === '' ? undefined : Number(postTestSpo2), postTestPulse: postTestPulse === '' ? undefined : Number(postTestPulse), recoverySpo2: recoverySpo2 === '' ? undefined : Number(recoverySpo2), recoveryPulse: recoveryPulse === '' ? undefined : Number(recoveryPulse), }; console.log(">>> handleSaveRecovery: Preparing data to save:", resultData); try { const id = await addWalkTestResult(resultData); console.log(`Walk test results saved successfully to DB with ID: ${id}.`); setCurrentTestId(id); setTestPhase('finished'); setStatusMessage("Test results saved. Now enter the distance walked."); } catch (error) { console.error("Error saving walk test results:", error); setStatusMessage("Error saving test results. Please try again."); setTestPhase('error'); setTimeout(() => setStatusMessage(null), 5000); } };
    const handleUpdateDistance = async () => { console.log(">>> handleUpdateDistance called. State currentTestId:", currentTestId); if (currentTestId === null) { setStatusMessage("Error: Cannot update distance, test ID not found."); console.error(">>> handleUpdateDistance FAILED: currentTestId is null"); setTimeout(() => setStatusMessage(null), 5000); return; } const distanceValue = parseFloat(distanceInput); console.log(`>>> handleUpdateDistance: Parsed distanceInput "${distanceInput}" to distanceValue:`, distanceValue, `(Type: ${typeof distanceValue})`); console.log(`>>> handleUpdateDistance: Selected distanceUnitInput:`, distanceUnitInput, `(Type: ${typeof distanceUnitInput})`); if (isNaN(distanceValue) || distanceValue < 0) { setStatusMessage("Please enter a valid positive number for distance."); console.error(`>>> handleUpdateDistance FAILED: Invalid distance value "${distanceValue}"`); setTimeout(() => setStatusMessage(null), 3000); return; } setStatusMessage("Updating distance..."); try { console.log(`>>> handleUpdateDistance: Attempting to call db.updateWalkTestDistance with ID: ${currentTestId}, distance: ${distanceValue}, unit: ${distanceUnitInput}`); const updatedCount = await updateWalkTestDistance(currentTestId, distanceValue, distanceUnitInput); console.log(`>>> handleUpdateDistance: db.updateWalkTestDistance returned count:`, updatedCount); if (updatedCount > 0) { console.log(`>>> handleUpdateDistance: SUCCESS - Record ${currentTestId} updated in DB.`); setStatusMessage("Distance updated successfully!"); } else { console.warn(`>>> handleUpdateDistance: WARNING - No records were updated for ID: ${currentTestId}. Was the data already the same?`); setStatusMessage(`Distance update reported 0 rows changed for record ${currentTestId}.`); } setTimeout(() => setStatusMessage(null), 5000); } catch (error) { console.error(">>> handleUpdateDistance: FAILED during DB update:", error); setStatusMessage("Error updating distance. Please try again."); setTimeout(() => setStatusMessage(null), 5000); } };

    const getChartData = () => ({ labels: ['Start', '3 min', '6 min', `Recovery`], datasets: [ { label: 'SpOâ‚‚ (%)', data: [ preTestSpo2 === '' ? null : preTestSpo2, midpointSpo2 === '' ? null : midpointSpo2, postTestSpo2 === '' ? null : postTestSpo2, recoverySpo2 === '' ? null : recoverySpo2 ], borderColor: 'rgb(54, 162, 235)', backgroundColor: 'rgba(54, 162, 235, 0.5)', yAxisID: 'ySpO2', tension: 0.1, spanGaps: true, }, { label: 'Pulse (bpm)', data: [ preTestPulse === '' ? null : preTestPulse, midpointPulse === '' ? null : midpointPulse, postTestPulse === '' ? null : postTestPulse, recoveryPulse === '' ? null : recoveryPulse ], borderColor: 'rgb(255, 99, 132)', backgroundColor: 'rgba(255, 99, 132, 0.5)', yAxisID: 'yPulse', tension: 0.1, spanGaps: true, }, ], });
    const chartOptions = { responsive: true, maintainAspectRatio: false, plugins: { legend: { position: 'top' as const }, title: { display: true, text: '6MWT Vitals Summary' }, tooltip: { mode: 'index' as const, intersect: false } }, scales: { x: { title: { display: true, text: 'Test Stage' } }, ySpO2: { type: 'linear' as const, display: true, position: 'left' as const, title: { display: true, text: 'SpOâ‚‚ (%)' }, min: 70, max: 100 }, yPulse: { type: 'linear' as const, display: true, position: 'right' as const, title: { display: true, text: 'Pulse (bpm)' }, grid: { drawOnChartArea: false } } } };

    return (
        <div className="walk-test-container">
          <h1>6-Minute Walk Test (6MWT)</h1>
          {statusMessage && ( <p className={`status-message ${statusMessage.includes('Error') || statusMessage.includes('Please enter') ? 'error' : statusMessage.includes('Updating') ? 'info' : 'success'}`}> {statusMessage} </p> )}
           {testPhase === 'idle' && ( <> <div className="instructions-section"> <h2>Instructions</h2> <p> This test helps measure how far you can walk in 6 minutes and monitors your oxygen levels. Ensure you have your pulse oximeter ready. Rest for a few minutes before starting. </p> <ul> <li>Enter your <strong>Resting SpOâ‚‚, Pulse, Oxygen status, and COPD diagnosis status</strong> below.</li> <li>Click <strong>Start Test</strong>.</li> <li>Walk at your own normal pace for 6 minutes. You can slow down or rest if needed, but keep the timer running.</li> <li>The app will prompt you to record readings at the midpoint (3 min), end (6 min), and after 1 minute of recovery.</li> <li>After saving, you will be prompted to enter the distance walked.</li> </ul> <p><strong>Important:</strong> Stop immediately if you experience severe shortness of breath, chest pain, or dizziness. This test should only be done if approved by your doctor.</p> </div> <div className="pre-test-section form-section"> <h2>Resting Readings (Pre-Test)</h2> <div className="form-group"> <label>Do you have a COPD diagnosis?</label> <div className="radio-group"> <label htmlFor="copdYes" style={{ marginRight: '15px', cursor: 'pointer' }}><input type="radio" id="copdYes" name="copdStatus" value="yes" checked={hasCOPD === true} onChange={() => setHasCOPD(true)} style={{ marginRight: '5px' }} /> Yes</label> <label htmlFor="copdNo" style={{ cursor: 'pointer' }}><input type="radio" id="copdNo" name="copdStatus" value="no" checked={hasCOPD === false} onChange={() => setHasCOPD(false)} style={{ marginRight: '5px' }} /> No</label> </div> </div> <div className="form-group"> <label htmlFor="preTestSpo2">Resting SpOâ‚‚ (%)</label> <input type="number" id="preTestSpo2" value={preTestSpo2} onChange={(e) => setPreTestSpo2(e.target.value === '' ? '' : parseInt(e.target.value, 10))} min="50" max="100" placeholder="e.g., 95" required /> </div> <div className="form-group"> <label htmlFor="preTestPulse">Resting Pulse (bpm)</label> <input type="number" id="preTestPulse" value={preTestPulse} onChange={(e) => setPreTestPulse(e.target.value === '' ? '' : parseInt(e.target.value, 10))} min="30" max="220" placeholder="e.g., 70" required /> </div> <div className="form-group"> <label>On Oxygen (at start of test)?</label> <div className="radio-group"> <label htmlFor="oxygenYes" style={{ marginRight: '15px', cursor: 'pointer' }}><input type="radio" id="oxygenYes" name="oxygenStatus" value="yes" checked={preTestOxygenOn === true} onChange={() => setPreTestOxygenOn(true)} style={{ marginRight: '5px' }} /> Yes</label> <label htmlFor="oxygenNo" style={{ cursor: 'pointer' }}><input type="radio" id="oxygenNo" name="oxygenStatus" value="no" checked={preTestOxygenOn === false} onChange={() => { setPreTestOxygenOn(false); setPreTestOxygenFlow(''); }} style={{ marginRight: '5px' }} /> No</label> </div> </div> {preTestOxygenOn && ( <div className="form-group"> <label htmlFor="preO2Flow">Oxygen Flow (L/min)</label> <input type="number" id="preO2Flow" value={preTestOxygenFlow} onChange={(e) => setPreTestOxygenFlow(e.target.value === '' ? '' : parseFloat(e.target.value))} min="0" step="0.5" placeholder="e.g., 2" required={preTestOxygenOn} /> </div> )} <button onClick={handleStartTest} className="btn">Start Test</button> </div> </> )}
           {(testPhase === 'running' || testPhase === 'paused' || testPhase === 'midpoint_log' || testPhase === 'post_test_log' || testPhase === 'recovery_timer_running' || testPhase === 'recovery_log') && ( <div className="timer-section"> <h2> {testPhase === 'running' || testPhase === 'paused' ? 'Test In Progress' : testPhase === 'midpoint_log' ? 'Record Midpoint (Timer Paused)' : testPhase === 'post_test_log' ? 'Record Post-Test (Test Finished)' : testPhase === 'recovery_timer_running' ? 'Recovery Period' : testPhase === 'recovery_log' ? 'Record Recovery (Period Finished)' : ''} </h2> <div className="timer-display"> {(testPhase === 'running' || testPhase === 'paused' || testPhase === 'midpoint_log') ? formatTime(mainTimer) : '' } {(testPhase === 'recovery_timer_running') ? formatTime(recoveryTimer) : '' } {(testPhase === 'post_test_log' || testPhase === 'recovery_log') ? '00:00' : '' } </div> <div className="timer-controls"> {(testPhase === 'running' || testPhase === 'paused') && ( <button onClick={handlePauseResume} className="btn btn-secondary"> {testPhase === 'running' ? 'Pause Test' : 'Resume Test'} </button> )} {(testPhase === 'running' || testPhase === 'paused' || testPhase === 'midpoint_log' || testPhase === 'post_test_log' || testPhase === 'recovery_timer_running' || testPhase === 'recovery_log') && ( <button onClick={stopTest} className="btn btn-danger" style={{ marginLeft: '10px' }}> Stop Test & Reset </button> )} </div> </div> )}
           {testPhase === 'midpoint_log' && ( <div className="midpoint-log-section form-section"> <h2>Record Midpoint Readings (approx. 3:00)</h2> <div className="form-group"> <label htmlFor="midSpo2">Midpoint SpOâ‚‚ (%)</label> <input type="number" id="midSpo2" value={midpointSpo2} onChange={(e) => setMidpointSpo2(e.target.value === '' ? '' : parseInt(e.target.value, 10))} min="50" max="100" required placeholder="Enter reading"/> </div> <div className="form-group"> <label htmlFor="midPulse">Midpoint Pulse (bpm)</label> <input type="number" id="midPulse" value={midpointPulse} onChange={(e) => setMidpointPulse(e.target.value === '' ? '' : parseInt(e.target.value, 10))} min="30" max="220" required placeholder="Enter reading"/> </div> <button className="btn" onClick={handleSaveMidpoint}> Confirm Readings & Resume Test </button> </div> )}
           {testPhase === 'post_test_log' && ( <div className="post-test-log-section form-section"> <h2>Record Post-Test Readings (End of 6 min)</h2> <div className="form-group"> <label htmlFor="postSpo2">Post-Test SpOâ‚‚ (%)</label> <input type="number" id="postSpo2" value={postTestSpo2} onChange={(e) => setPostTestSpo2(e.target.value === '' ? '' : parseInt(e.target.value, 10))} min="50" max="100" required placeholder="Enter reading"/> </div> <div className="form-group"> <label htmlFor="postPulse">Post-Test Pulse (bpm)</label> <input type="number" id="postPulse" value={postTestPulse} onChange={(e) => setPostTestPulse(e.target.value === '' ? '' : parseInt(e.target.value, 10))} min="30" max="220" required placeholder="Enter reading"/> </div> <button className="btn" onClick={handleSavePostTest}>Confirm Readings & Start Recovery</button> </div> )}
           {testPhase === 'recovery_log' && ( <div className="recovery-log-section form-section"> <h2>Record Recovery Readings (After 1 min rest)</h2> <div className="form-group"> <label htmlFor="recSpo2">1-Min Recovery SpOâ‚‚ (%)</label> <input type="number" id="recSpo2" value={recoverySpo2} onChange={(e) => setRecoverySpo2(e.target.value === '' ? '' : parseInt(e.target.value, 10))} min="50" max="100" required placeholder="Enter reading"/> </div> <div className="form-group"> <label htmlFor="recPulse">1-Min Recovery Pulse (bpm)</label> <input type="number" id="recPulse" value={recoveryPulse} onChange={(e) => setRecoveryPulse(e.target.value === '' ? '' : parseInt(e.target.value, 10))} min="30" max="220" required placeholder="Enter reading"/> </div> <button className="btn" onClick={handleSaveRecovery}>Confirm Readings & Finish Test</button> </div> )}
           {testPhase === 'finished' && ( <div className="finished-section"> <h2>Test Complete!</h2> <p>Test record saved with ID: {currentTestId || 'N/A'}.</p> <div className="distance-update-section form-section"> <h3>Enter Distance Walked</h3> <div className="form-group"> <label htmlFor="distanceInput">Distance:</label> <input type="number" id="distanceInput" value={distanceInput} onChange={(e) => setDistanceInput(e.target.value)} min="0" placeholder="e.g., 400" style={{ width: '100px', marginRight: '5px' }} required /> <select value={distanceUnitInput} onChange={(e) => setDistanceUnitInput(e.target.value as DistanceUnit)} style={{ marginRight: '10px' }} > <option value="meters">Meters</option> <option value="feet">Feet</option> </select> <button onClick={handleUpdateDistance} className="btn btn-secondary" disabled={!currentTestId || distanceInput === ''} > Update Distance </button> </div> </div> {/* *** Chart Section is here *** */} <div className="walk-test-summary-chart" style={{ height: '300px', marginTop: '30px', marginBottom: '20px' }}> <h3>Test Summary Chart</h3> <Line options={chartOptions} data={getChartData()} /> </div> {/* *** End of Chart Section *** */}
               {/* *** MODIFIED "Start New Test" to call stopTest() *** */}
               <button onClick={stopTest} className="btn" style={{ marginTop: '20px' }}>Start New Test</button>
            </div> )}
            {testPhase === 'error' && ( <div className="error-section"> <h2>Error</h2> <p>An error occurred...</p> {statusMessage && <p className="error">{statusMessage}</p>} <button onClick={handleStartTest} className="btn">Start New Test</button> </div> )}
        </div>
    );
}
export default WalkTestPage;